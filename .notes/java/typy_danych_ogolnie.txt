Główną różnicą pomiędzy typami prymitywnymi a typami referencyjnymi jest to,
że zmienne typów prymitywnych przechowują w pamięci komputera konkretne wartości,
natomiast zmienne typu referencyjnego przechowują adresy obiektów w pamięci.

Przechowywanie danych:
- ***rejestry***: najszybciej dostępna pamięć, znajduje się w innym miejscu niż pozostałe - wewnątrz procesora; liczba rejestrów jest znacznie ograniczona
- ***stos***: jest umieszczony w pamięci RAM; jest bezpośrednio obsługiwany przez procesor tzw. wskaźnik stosu, który jest przesuwany w dół (zajęcie obszaru) lub w górę (zwolnienie obszaru); szybki i efektywny sposób przydzielania pamięci; potrzeba określenia dokładnego rozmiaru oraz czasu życia danych przechowywanych na stosie [dane prymitywne]
- ***sterta***: jest to fragment pamięci ogólnego zastosowania w obrębie pamięci RAM, wolniejszy sposób
- ***obszar stałych***: są często umieszczane bezpośrednio w kodzie programu; czasem są wydzielane z kodu i umieszczone w pamięci tylko do odczytu ROM
- ***obszar spoza RAM***: obiekty są przekształcane w strumień bajtów (strumieniowanie obiektów) by mogły być przesłane na inną maszynę bądź umieszczane na dysku (obiekty trwałe) - oba sposoby zmieniają obiekty w coś co istnieje na innym medium

W C++ obiekty da się umieszczać na stosie - potrzeba określenia rozmiaru i czasu życia

Typy nieprymitywne oferują wiele funkcji i możliwości, które umożliwiają tworzenie bardziej złożonych
i dynamicznych aplikacji.

Obiekty wysokich precyzji: BigInteger, BigDecimal


**Obiekt**:
- Jest instancją klasy. Kiedy tworzysz obiekt, rezerwujesz pamięć i przypisujesz wartości do jego pól.
- Obiekt istnieje w pamięci i można na nim wywoływać metody.
- Przykład tworzenia obiektu:

  ```java
  KlasaMoja mojObiekt = new KlasaMoja();
  ```

**Referencja**:
- Jest zmienną, która przechowuje adres obiektu w pamięci.
- Referencje wskazują na obiekty, ale same nie przechowują danych obiektowych.
- Można mieć wiele referencji do jednego obiektu.
- Przykład przypisania referencji:

  ```java
  KlasaMoja innaReferencja = mojObiekt; // obie referencje wskazują na ten sam obiekt
  ```

W skrócie:
- **Obiekt** to rzeczywista instancja klasy zawierająca dane.
- **Referencja** to zmienna wskazująca na obiekt.
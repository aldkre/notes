To typy złożone, zdefiniowane w bibliotekach standardowych języka Java
oraz tworzone przez programistów poprzez pisanie klas. Do typów złożonych zaliczają się także tablice.

### String
Używany do reprezentacji ciągów znaków:
- ***Zakres***: Nieograniczony (ilość znaków zależy od dostępnej pamięci)
- ***Domyślna wartość***: null

String nie jest wartością prymitywną w Javie. Jest to obiekt reprezentujący sekwencję znaków i jest instancją klasy `java.lang.String`.
Chociaż String wygląda na typ prosty i jest używany w sposób, który wydaje się prosty,
jest to w rzeczywistości obiekt klasy, co oznacza, że ma metody i może być manipulowany za pomocą różnych operacji.

--------------------------------

### Array
Tablica, która może przechowywać wiele elementów tego samego typu:
- ***Zakres***: Zależny od typu elementu tablicy
- ***Domyślna wartość***: null

```java
int[] liczby = {1, 2, 3, 4, 5};
```

--------------------------------

### Class (Obiekt)
Obiekty klas są instancjami klas, które mogą mieć pola (zmienne) i metody:
- ***Zakres***: Zależny od klasy
- ***Domyślna wartość***: null

```java
public class Osoba
{
    String imie;
    int wiek;

    public Osoba(String imie, int wiek)
    {
        this.imie = imie;
        this.wiek = wiek;
    }
}

Osoba osoba1 = new Osoba("Jan", 30);
```
Zgodnie z formatem zdefiniowanym przez UML każda klasa reprezentowana jest przez prostokąt, którego górna część przeznaczona jest na nazwę, środkowa na pola danych, dolna zaś na funkcje składowe.
 
Specyfikatory dostępu określają kto jest upoważniony do używania: public / private / protected
- public - definicje są dostępne dla każdego
- private - dostęp posiada twórca danej klasy wewnątrz funkcji składowych
- protected - klasy dziedziczące z klasy mają dostęp do elementów
Domyślny tryb dostępu (pakietowy) jest uruchamiany jeśli nie podamy żadnego specyfikatora: do składowych pakietowych mogą się odwoływać inne klasy z pakietu, natomiast poza pakietem widziane są jako prywatne.

--------------------------------

### Interface
Interfejsy definiują metody, które muszą zostać zaimplementowane przez klasy.

- Interfejs definiuje zestaw metod, które klasa musi zaimplementować, ale nie zawiera implementacji tych metod.
```java
interface Zwierze
{
    void dzwiek();
}

class Pies implements Zwierze
{
    public void dzwiek()
    {
        System.out.println("Hau Hau");
    }
}
```

- Klasa, która implementuje interfejs, musi zdefiniować wszystkie metody zawarte w interfejsie.
```java
Pies pies = new Pies();
pies.dzwiek(); // Wyświetli: Hau Hau
```
Różnica między **klasą abstrakcyjną** a **interfejsem** w Javie:
- **Klasa abstrakcyjna** może zawierać zarówno metody abstrakcyjne (bez implementacji), jak i konkretne (z implementacją). Klasa abstrakcyjna może mieć zmienne instancji.
```java
abstract class Zwierze
{
    abstract void dzwiek();
    void oddychaj()
    {
        System.out.println("Oddycha...");
    }
}
```

- __**Interfejs**__ definiuje tylko nagłówki metod (do Javy 8, gdy wprowadzono domyślne metody). Interfejsy są bardziej ogólne, klasy abstrakcyjne mogą posiadać więcej szczegółów.
```java
interface Zwierze
{
    void dzwiek();
}
```

--------------------------------

### Collections (Kolekcje)
Java Collections Framework zawiera struktury danych takie jak List, Set, Map.
```java
List<String> lista = new ArrayList<>();
Set<Integer> zbior = new HashSet<>();
Map<String, Integer> mapa = new HashMap<>();
```

--------------------------------

### Enums
Enumy to specjalne typy klas używane do reprezentowania grupy stałych.
```java
public enum Dzien
    {
        PONIEDZIALEK, WTOREK, SRODA, CZWARTEK, PIATEK, SOBOTA, NIEDZIELA
    }

Dzien dzien = Dzien.PONIEDZIALEK;
```
Domyślne wartości dla typów referencyjnych są zawsze `null`, co oznacza brak obiektu.
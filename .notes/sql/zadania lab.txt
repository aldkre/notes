***LAB 1***

Używany system zarządzania relacyjnymi bazami danych: **Postgres**


Tabele źródłowe utworzone na podstawie pliku: **sql-tools/labbd.sql** (PLATFORMA ZDALNEJ EDUKACJI -> Bazy danych i język zapytań SQL [SPD] -> Materiały pomocnicze do lab -> MySQL - narzędzie HeidiSQL


*W pliku na potrzeby dostosowania do systemu Postgres, zmieniono datetime -> timestamp* //
*Rozwiązania nie zostały sprawdzone, w późniejszym czasie uzupełnię o inne możliwe rozwiązania oraz resztę odpowiedzi*

```sql
-- 3.1. Podać nazwisko studenta o numerze 5.
SELECT nazwisko 
FROM studenci 
WHERE nr_stud = 5;

-- 3.2. Podać nazwy przedmiotów zaczynające się od litery A.  
SELECT nazwa_przedm
FROM przedmioty
WHERE nazwa_przedm ILIKE 'a%';

-- 3.3. Podać (w porządku alfabetycznym) nazwiska studentek, które z dowolnego przedmiotu otrzymały ocenę > 4.5
SELECT nazwisko
FROM studenci 
WHERE plec = 'K' AND  nr_stud IN -- albo = ANY
(SELECT nr_stud FROM oceny WHERE ocena > 4.5)
ORDER BY nazwisko;

SELECT DISTINCT s.nazwisko
FROM studenci s, oceny o
WHERE s.nr_stud = o.nr_stud
AND s.plec = 'K' AND o.ocena > 4.5
ORDER BY s.nazwisko;

-- 3.4. Podać (w odwrotnej kolejności alfabetycznej) nazwiska studentów mężczyzn, którzy studiują na kierunku ELEKTRONIKA MED lub INFORMATYKA.    
SELECT nazwisko
FROM studenci
WHERE plec = 'M' AND  nr_kier IN -- albo = ANY
(SELECT nr_kier FROM kierunki WHERE LOWER(nazwa_kier) IN('informatyka', 'elektronika med'))
ORDER BY nazwisko DESC;

-- 3.5. Podać nazwy przedmiotów, z których wystawiono przynajmniej jedną ocenę = 5. Nazwa danego przedmiotu powinna się pojawić tylko raz. 
SELECT nazwa_przedm
FROM przedmioty
WHERE nr_przedm IN
(SELECT nr_przedm FROM oceny WHERE ocena = 5)
ORDER BY nazwa_przedm;

SELECT DISTINCT nazwa_przedm
FROM przedmioty p, oceny o
WHERE p.nr_przedm = o.nr_przedm AND ocena = 5
ORDER BY nazwa_przedm;

-- 3.6. Podać liczbę studentów kierunku INFORMATYKA.   
SELECT COUNT(nr_stud)
FROM studenci 
WHERE nr_kier IN
(SELECT nr_kier FROM kierunki WHERE nazwa_kier = 'INFORMATYKA');

-- 3.7. Podać średnie ocen studentów, których nazwiska zaczynają się od liter KO. 
SELECT round(AVG(ocena),2)
FROM oceny
WHERE nr_stud IN 
(SELECT nr_stud FROM studenci WHERE nazwisko ILIKE 'ko%');

SELECT round(AVG(o.ocena),2)
FROM oceny o, studenci s
WHERE o.nr_stud = s.nr_stud
AND UPPER(s.nazwisko) LIKE 'KO%';

-- 3.8. Podać daty urodzenia najstarszych studentów na poszczególnych kierunkach. 
SELECT k.nr_kier, k.nazwa_kier, MIN(data_ur)
FROM studenci s, kierunki k
WHERE s.nr_kier = k.nr_kier
GROUP BY k.nr_kier, k.nazwa_kier
ORDER BY k.nr_kier;

SELECT nr_kier, data_ur
FROM studenci s1
WHERE data_ur = (SELECT MIN(data_ur) FROM studenci s2 WHERE s1.nr_kier = s2.nr_kier)
ORDER BY nr_kier;

-- 3.9. Dla każdego studenta podać liczbę ocen, które otrzymał z poszczególnych przedmiotów.
SELECT s.nr_stud, s.nazwisko, p.nazwa_przedm, round(AVG(o.ocena),2) --s.nr_stud, s.nazwisko, s.nr_kier, o.nr_przedm, p.nazwa_przedm, o.zal_egz, o.termin, o.ocena
FROM studenci s, oceny o, przedmioty p
WHERE s.nr_stud = o.nr_stud AND o.nr_przedm = p.nr_przedm
GROUP BY s.nr_stud, s.nazwisko, p.nazwa_przedm
ORDER BY s.nazwisko, p.nazwa_przedm

-- 3.10. Podać nazwy przedmiotów, z których wystawiono więcej niż 8 ocen.  
SELECT p.nazwa_przedm
FROM oceny o, przedmioty p
WHERE o.nr_przedm = p.nr_przedm
GROUP BY o.nr_przedm, p.nazwa_przedm
HAVING COUNT(o.ocena) > 8
ORDER BY p.nazwa_przedm

-- 3.11. Dla każdego przedmiotu podać liczbę studentów, którzy otrzymali z nich ocenę.  (Uwaga! Niektórzy studenci mają kilka ocen z danego przedmiotu).  
SELECT p.nazwa_przedm, COUNT(DISTINCT o.nr_stud)
FROM oceny o, przedmioty p
WHERE o.nr_przedm = p.nr_przedm
GROUP BY o.nr_przedm, p.nazwa_przedm

-- 3.12. Podać nazwiska studentów, którzy są starsi od studenta WILK. 
SELECT DISTINCT nazwisko
FROM studenci
WHERE data_ur < (SELECT data_ur FROM studenci WHERE UPPER(nazwisko) = 'WILK')
ORDER BY nazwisko

-- 3.13. Podać nazwiska studentów, których średnia ocen jest większa od średniej ocen studenta WALCZAKA. 
SELECT DISTINCT nazwisko
FROM studenci
WHERE nr_stud IN 
(SELECT nr_stud FROM oceny GROUP BY nr_stud HAVING AVG(ocena) > 
(SELECT AVG(ocena) FROM oceny WHERE nr_stud = 
(SELECT nr_stud from studenci WHERE UPPER(nazwisko) = 'WALCZAK')
)
)
ORDER BY nazwisko

-- 3.14. Podać nazwy kierunków, na których studiuje więcej studentów niż na kierunku ELEKTRONIKA MED. 
SELECT DISTINCT nazwa_kier
FROM kierunki
WHERE nr_kier IN
(SELECT nr_kier FROM studenci GROUP BY nr_kier HAVING COUNT(DISTINCT nr_stud) >
(SELECT COUNT(DISTINCT nr_stud) FROM studenci WHERE nr_kier =
(SELECT nr_kier FROM kierunki WHERE UPPER(nazwa_kier) = 'ELEKTRONIKA MED')
)
)
ORDER BY nazwa_kier

-- 3.15. Podać numery i nazwiska studentów kierunku INFORMATYKA, którzy z przedmiotu BAZY DANYCH otrzymali oceny wyższe od ocen każdego ze studentów kierunku ROBOTYKA z tego przedmiotu. 
SELECT s.nr_stud, s.nazwisko
FROM studenci s
LEFT JOIN oceny o ON s.nr_stud = o.nr_stud
LEFT JOIN kierunki k ON s.nr_kier = k.nr_kier
LEFT JOIN przedmioty p ON o.nr_przedm = p.nr_przedm
WHERE p.nazwa_przedm = 'BAZY DANYCH'
AND UPPER(k.nazwa_kier) IN ('INFORMATYKA')
AND o.ocena > 
(
	SELECT MAX(ocena) FROM oceny 
	WHERE nr_przedm IN (SELECT nr_przedm FROM przedmioty WHERE nazwa_przedm = 'BAZY DANYCH')
	AND nr_stud IN (SELECT nr_stud FROM studenci WHERE nr_kier = (SELECT nr_kier FROM kierunki WHERE nazwa_kier = 'ROBOTYKA'))
)
  
-- 3.16. Podaj przedmioty realizowane przez największą liczbę pracowników. 
SELECT nazwa_przedm, COUNT(DISTINCT(nr_prac)) AS liczba_pracownikow
FROM pracownicy pra, przedmioty prz
WHERE prz.nr_odp_prac = pra.nr_prac
GROUP BY nazwa_przedm ORDER BY liczba_pracownikow DESC

-- 3.x16. Podaj przedmioty realizowane przez największą liczbę studentów. 
SELECT nazwa_przedm FROM przedmioty WHERE nr_przedm IN
(SELECT nr_przedm FROM 
(SELECT nr_przedm, COUNT(DISTINCT(nr_stud)) FROM oceny GROUP BY nr_przedm HAVING COUNT(DISTINCT(nr_stud)) = 
(SELECT MAX(counted) FROM (SELECT COUNT(DISTINCT(nr_stud)) AS counted FROM oceny GROUP BY nr_przedm)A))B)

-- 3.17. Podać daty urodzenia i nazwiska najstarszych studentów na poszczególnych kierunkach (wykorzystaj zapytania skorelowane). 
SELECT nr_kier, nazwisko, data_ur FROM studenci s1
WHERE data_ur = 
(SELECT MIN(data_ur) FROM studenci s2 WHERE s1.nr_kier = s2.nr_kier)
  
-- 3.18. Podać średnią wypłatę wszystkich pracowników będących kierownikami tematów (chodzi o wyświetlenie jednej kwoty jako średniej wszystkich kierowników).   
SELECT ROUND(AVG(kwota),2) FROM wyplaty WHERE nr_prac IN (SELECT nr_prac_kt FROM tematy) --srednia wyplat
SELECT ROUND(AVG(srednia),2) FROM -- srednia sredniej wyplaty
(SELECT nr_prac, AVG(kwota) as srednia FROM wyplaty WHERE nr_prac IN (SELECT nr_prac_kt FROM tematy) GROUP BY nr_prac)A

-- 4.1. Do tabeli zespoly dopisać jeszcze jeden wiersz, podając dowolne wartości dla wszystkich atrybutów. Sprawdzić efekt wykonanej operacji, wykonując na tabeli zapytanie SELECT. 
INSERT INTO zespoly (nr_zesp, nazwa_zesp, nr_prac_kz, nr_inst) VALUES (12, 'TESTOWA GRUPA', 1, 1)
SELECT * FROM zespoly

-- 4.2. Do tabeli zespoly ponownie dopisać nowy wiersz, ale tym razem proszę uzupełnić tylko dane dotyczące numeru zespołu i numeru instytutu.  Efekt wykonanej operacji sprawdzić, wykonując zapytanie SELECT z warunkiem  …NAZWA_ZESP IS NULL...  Czy został wyświetlony rekord wprowadzony przed chwilą? Jeżeli nie, to zmodyfikuj zapytanie tak, aby rekord został wyświetlony. 
-- 4.3. Zaktualizować wiersz wpisany w poleceniu 4.2, dodając (aktualizując) brakujące dane o numerze pracowniczym kierownika zespołu i nazwie zespołu. Przykładowo, jako numer pracowniczy kierownika zespołu można użyć wartości 10. Sprawdź poprawność aktualizacji odpowiednim poleceniem SELECT. 
-- 4.4. Do tabeli przedmioty dodać nowy przedmiot na kierunku ROBOTYKA, którego nazwa brzmi STATYSTYKA. W związku z tym, że przedmiot ma zarówno formę wykładu, jak i ćwiczeń, należy dodać ten przedmiot jako 2 osobne wiersze – raz jako wykład (wartość atrybutu KOD_TPRZEDM to WYK), a raz jako ćwiczenia (wartość atrybutu KOD_TPRZEDM to CWC).  Dla wykładu, przedmiotem nadrzędnym powinien być wykład ANALIZA MATEMATYCZNA, a dla ćwiczeń – wykład z dodanej przed chwilą statystyki. Pracownikiem odpowiedzialnym za przedmiot – i za wykład i za ćwiczenia – powinien być kierownik zespołu nr 5. 
-- 4.5. Sporządzić zestawienie liczby studentów, którzy z przedmiotu o nazwie TABAKS dostali poszczególne oceny (ile osób dostało ocenę 2, ile - ocenę 3, itd.).  
-- 4.6. Z tabeli oceny usunąć wszystkie wiersze, w których z przedmiotu o numerze 70 zostały wystawione oceny niedostateczne.  
-- Wykonać ponownie zapytanie 4.5, potwierdzając poprawność usunięcia żądanych wierszy. 
-- 4.7. Operując na tabeli oceny, wszystkim studentom, którzy w terminie pierwszym dostali z przedmiotu o numerze 70 ocenę dobrą podnieść ocenę o 1 stopień.  Sprawdzić poleceniem SELECT z polecenia 4.5,  czy planowana zmiana powiodła się, tj. czy pojawiły się osoby z oceną bardzo dobrą. 
-- 4.8. Zdefiniować perspektywę pokazującą zawartość kolumn NR_STUD i NAZWISKO tabeli studenci. 
-- 4.9. Wykonać zapytanie, operujące na utworzonej perspektywie, pokazujące dane studentów, których numery są mniejsze niż 10. 
-- 4.10. Za pośrednictwem utworzonej perspektywy (UPDATE nazwa_perspektywy SET …) zmienić nazwisko studenta o numerze 1 na MARECKI. 
-- 4.11. Wykonać zapytanie sprawdzające czy zmiana została faktycznie odnotowana w tabeli studenci: select * from studenci where nr_stud=1; 
-- 4.12. Zdefiniować perspektywę pokazującą dla danego studenta (kolumny: NR_STUD i NAZWISKO tabeli studenci) oceny (kolumna OCENA tabeli oceny), które uzyskali w poszczególnych przedmiotach (kolumna NAZWA_PRZEDM tabeli przedmioty). Nadać kolumnom widoku (perspektywy) nazwy inne niż w tabelach bazowych (np. zamiast NR_STUD – id_studenta). 
-- 4.13. Wykonać zapytanie, operujące na utworzonej perspektywie, pokazujące dane wszystkich studentów. 
-- 4.14. Za pośrednictwem utworzonej perspektywy (UPDATE nazwa_perspektywy SET …) zmienić ocenę studenta o numerze 2 w przedmiocie BAZY DANYCH na 5. 
```

***LAB 2***

*Zadanie 1.
Właściciel biura podróży zgłosił zapotrzebowanie na stworzenie aplikacji obsługującej jego biuro. W bazie danych tej aplikacji powinny znaleźć się informacje dotyczące wycieczek prowadzonych przez to biuro – opis trasy oraz dane pilota wycieczki. Koszt wycieczki i liczba dostępnych miejsc zależna jest od terminu, w którym wycieczka się odbywa. Wycieczki na danej trasie organizowane są przy pomocy różnych środków lokomocji np. dojazd własny, autokar, samolot. Ponadto, należy prowadzić ewidencję wszystkich klientów korzystających z usług biura z założeniem, że pilot jednej wycieczki może być uczestnikiem innej. Proszę przyjąć, że jeden klient może być uczestnikiem wielu wycieczek.*

#### elementy składowe: 
* wycieczki (opis trasy, pilot wycieczki, koszt, dostępne miejsca, termin, środek lokomocji)
* klienci

**tabela  Wycieczki**
// 
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* nazwa (varchar NOT NULL)
* cena (decimal CHECK > 0)
* termin_wyjazdu (date)
* termin przyjazdu (date)
* nr_ewidencyjny (Piloci klucz obcy)
* nr_ewidencyjny (Srodki_lokomocji klucz obcy)
* liczba_miejsc (int CHECK > 0)
* opis_trasy (text)

**tabela  Piloci**
// 
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* imie (varchar NOT NULL)
* nazwisko (varchar NOT NULL)

**tabela  Klienci**
// 
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* imie (varchar NOT NULL)
* nazwisko (varchar NOT NULL)

**tabela  Srodki_lokomocji**
// 
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* nazwa (varchar NOT NULL)

**tabela  Koszty**
// 
* nr_faktury (varchar NOT NULL) 
* nr_ewidencyjny (Wycieczki klucz obcy)
* kwota (decimal CHECK > 0 && <= suma kwoty danej faktury)

**tabela  Składy**
// 
* nr_ewidencyjny (Wycieczki klucz obcy)
* nr_ewidencyjny (Klienci klucz obcy)
(przed próbą wpisania kolejnego klienta, sprawdzenie czy zostały wolne miejsca w danej wycieczce)

*Zadanie 2.
Firma “Ryzyk”, będąca pośrednikiem ubezpieczeniowym, zamówiła projekt bazy przechowującej dane o jej działalności. Firma poprzez współpracujących z nią agentów ubezpieczeniowych sprzedaje klientom produkty ubezpieczeniowe (PU) oferowane przez towarzystwa ubezpieczeniowe (TU). Dany PU jest związany tylko z jednym TU. PU sprzedany klientowi nazywany jest polisą. Za daną polisę klient może zapłacić jedną lub wiele składek. Dla każdego PU należy przechować jego kod i opis. Agenci mają uprawnienia do sprzedaży określonych PU. Polisa poza danymi klienta i sprzedającego ją agenta zawiera nr, wysokość ubezpieczenia i datę wystawienia. Dla składek płaconych przez klienta należy przechować nr składki, kwotę wpłaty i datę wpłaty. Dla TU należy przechować kod i nazwę, dla agenta jego kod, nazwisko i adres.*

#### elementy składowe: 
* produkty ubezpieczeniowe, kod, opis, towarzystwa ubezpieczeniowe w tym kod i nazwa, 
* polisy, dane klienta, agent, wysokość ubezpieczenia, data wystawienia, liczba rat, 
* agenci, produkt ubezpieczeniowy do którego jest uprawniony, kod, nazwisko, adres
* klienci
* składki klienta, kwota i data wpłaty

**tabela  Produkty_ubezpieczeniowe**
//
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* kod (varchar NOT NULL)
* nazwa (varchar NOT NULL)
* opis (varchar)
* nr_ewidencyjny (Towarzystwa_ubezpieczeniowe klucz obcy)

**tabela  Towarzystwa_ubezpieczeniowe**
//
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* kod (varchar NOT NULL)
* nazwa (varchar NOT NULL)

**tabela  Agenci**
//
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* kod (varchar NOT NULL)
* imie (varchar NOT NULL)
* nazwisko (varchar NOT NULL)
* adres (varchar NOT NULL)

**tabela  Agenci_uprawnieni**
//
* nr_ewidencyjny (Agenci klucz obcy)
* nr_ewidencyjny (Produkty_ubezpieczeniowy klucz obcy)

**tabela  Klienci**
//
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* imie (varchar NOT NULL)
* nazwisko (varchar NOT NULL)
* adres (varchar)

**tabela  Polisy**
//
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* nr_ewidencyjny (Klienci klucz obcy)
* nr_ewidencyjny (Agenci klucz obcy)
* data_wystawienia (date NOT NULL)
* kwota (decimal NOT NULL)

**tabela  Składki**
//
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* nr_ewidencyjny (Polisy klucz obcy)
* data_wpłaty (date NOT NULL)
* kwota (decimal NOT NULL)


*Zadanie 3.
Warsztat samochodowy zamówił projekt bazy danych mającej usprawnić jego działalność w zakresie wykonywanych napraw samochodów. W bazie należy przechować dane klienta (nazwisko, adres, pesel), oddawanego do naprawy samochodu (marka, model, nr silnika, rejestracja) oraz informacje o wykonanej naprawie. Na naprawę może składać się wiele różnych czynności (nazwa, opis, czas wykonania) wykonywanych przez różnych pracowników. Niektóre czynności wykonywane są przez kilku pracowników. Wskazany pracownik jest odpowiedzialny za przeprowadzenie naprawy. Dla naprawy przechować kwotę zapłaty, datę oddania samochodu do naprawy i datę odbioru samochodu. Dla pracownika przechować pesel, nazwisko, adres i datę zatrudnienia.*

#### elementy składowe: 
* klienci w tym nazwisko, adres, pesel
* samochody w tym właściciel, marka, model, nr silnika, rejestracja
* naprawy w tym nazwa, czas wykonania, opis, samochód, pracownik odpowiedzialny, pracownik wykonujący, data oddania, data odbioru, kwota zapłaty
* pracownik w tym pesel, nazwisko, adres, data zatrudnienia

**tabela  Klienci**
//
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* imie (varchar NOT NULL)
* nazwisko (varchar NOT NULL)
* adres (varchar)
* pesel (varchar)

**tabela  Pracownicy**
//
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* imie (varchar NOT NULL)
* nazwisko (varchar NOT NULL)
* adres (varchar NOT NULL)
* pesel (varchar NOT NULL)
* data_zatrudnienia (date NOT NULL)

**tabela  Samochody**
//
* nr_rejestracyjny (klucz główny varchar)
* marka (varchar NOT NULL)
* model (varchar NOT NULL)
* nr_silnika (varchar)

**tabela  Zgłoszenia_napraw**
//
* nr_ewidencyjny (klucz główny autouzupełnienie int)
* nr_rejestracyjny (Samochody klucz obcy)
* nr_ewidencyjny (Klienci klucz obcy)
* nr_ewidencyjny (Pracownicy klucz obcy) pracownik odpowiedzialny
* data_oddania (date NOT NULL)
* data_odbioru (date)
* kwota (decimal CHECK > 0)

**tabela  Naprawy**
//
* nr_ewidencyjny (Zgłoszenia_napraw klucz obcy)
* nr_ewidencyjny (Pracownicy klucz obcy) pracownik wykonujący
* czas_wykonania (date)
* opis (text)



*Zadanie 4.
Spółdzielnia lekarska „Szaman” zamówiła projekt bazy danych mającej usprawnić jej działalność. Baza ma przechowywać dane o wizytach pacjentów – lekarza, datę wizyty, rozpoznaną jednostkę chorobową (może być kilka) oraz zaordynowane medykamenty wraz z dawkami (jak często i ile). Dla pacjenta przechować: nazwisko, imię i adres; dla lekarza: numer, imię i nazwisko; dla lekarstwa: kod i nazwę; dla jednostki chorobowej: numer i krótki opis. Dla każdego pacjenta należy zapamiętać też dane lekarza rodzinnego, przy założeniu, że pacjent ma wizyty nie tylko u przypisanego lekarza.*

*Zadanie 5.
Sieć telewizyjna zamówiła projekt bazy danych przechowującej informacje o realizowanych przez nią programach 'talkshow'. Dla programu należy przechować jego identyfikator, nazwę i czas trwania. 'Talkshow' jest przygotowywany i prowadzony przez wiele osób, z których każda wykonuje określone funkcje. Dla funkcji zapamiętać jej nazwę i widełki stawki godzinowej. W bazie należy przechować stawkę godzinową i liczbę godzin, które dana osoba przepracowała przy danym programie pełniąc podaną funkcję. Jedna osoba przy tym samym programie może spełniać wiele funkcji. Na nagrania programów są zapraszani goście. Do wygenerowania zaproszenia potrzebne są: nazwisko, imię i adres zapraszanej osoby. Należy zapisać w bazie kto został zaproszony na dany program. Wyprodukowany program może być emitowany kilkukrotnie – należy zapamiętać nazwę kanału oraz datę i godzinę emisji.*